# file: InverseSupport_6D.py
# author: DAJones
# 2025.07.26: created

# These data structures and programs are in support of an optimization of a 6D Euclidean inverse.
# The routines here work solely with 64 place arrays, not instances of the Clifford.Accum.
# The major function does not finish computing the inverse.
# The cover function in util.py completes the algorithm and returns a proper Clifford.Accum class instance.

# ===================================================================================================
# This data set guides the optimized formation of A~A for a 6D multivector A
# The result is self-reverse
HM = (
     ( 1, (0, 0, 1), (1, 2, 3), (1, 4, 5), (0, 6, 7), (1, 8, 9), (0,10,11), (0,12,13), (1,14,15), 
          (1,16,17), (0,18,19), (0,20,21), (1,22,23), (0,24,25), (1,26,27), (1,28,29), (0,30,31), 
          (1,32,33), (0,34,35), (0,36,37), (1,38,39), (0,40,41), (1,42,43), (1,44,45), (0,46,47), 
          (0,48,49), (1,50,51), (1,52,53), (0,54,55), (1,56,57), (0,58,59), (0,60,61), (1,62,63), ),
     ( 2, (0, 0, 2), (0, 1, 3), (1, 4, 6), (1, 5, 7), (1, 8,10), (1, 9,11), (0,12,14), (0,13,15), 
          (1,16,18), (1,17,19), (0,20,22), (0,21,23), (0,24,26), (0,25,27), (1,28,30), (1,29,31), 
          (1,32,34), (1,33,35), (0,36,38), (0,37,39), (0,40,42), (0,41,43), (1,44,46), (1,45,47), 
          (0,48,50), (0,49,51), (1,52,54), (1,53,55), (1,56,58), (1,57,59), (0,60,62), (0,61,63), ),
     ( 4, (0, 0, 4), (0, 1, 5), (0, 2, 6), (0, 3, 7), (1, 8,12), (1, 9,13), (1,10,14), (1,11,15), 
          (1,16,20), (1,17,21), (1,18,22), (1,19,23), (0,24,28), (0,25,29), (0,26,30), (0,27,31), 
          (1,32,36), (1,33,37), (1,34,38), (1,35,39), (0,40,44), (0,41,45), (0,42,46), (0,43,47), 
          (0,48,52), (0,49,53), (0,50,54), (0,51,55), (1,56,60), (1,57,61), (1,58,62), (1,59,63), ),
     ( 8, (0, 0, 8), (0, 1, 9), (0, 2,10), (0, 3,11), (0, 4,12), (0, 5,13), (0, 6,14), (0, 7,15), 
          (1,16,24), (1,17,25), (1,18,26), (1,19,27), (1,20,28), (1,21,29), (1,22,30), (1,23,31), 
          (1,32,40), (1,33,41), (1,34,42), (1,35,43), (1,36,44), (1,37,45), (1,38,46), (1,39,47), 
          (0,48,56), (0,49,57), (0,50,58), (0,51,59), (0,52,60), (0,53,61), (0,54,62), (0,55,63), ),
     (15, (0, 0,15), (0, 1,14), (1, 2,13), (1, 3,12), (0, 4,11), (0, 5,10), (1, 6, 9), (1, 7, 8), 
          (0,16,31), (0,17,30), (1,18,29), (1,19,28), (0,20,27), (0,21,26), (1,22,25), (1,23,24), 
          (0,32,47), (0,33,46), (1,34,45), (1,35,44), (0,36,43), (0,37,42), (1,38,41), (1,39,40), 
          (0,48,63), (0,49,62), (1,50,61), (1,51,60), (0,52,59), (0,53,58), (1,54,57), (1,55,56), ),
     (16, (0, 0,16), (0, 1,17), (0, 2,18), (0, 3,19), (0, 4,20), (0, 5,21), (0, 6,22), (0, 7,23), 
          (0, 8,24), (0, 9,25), (0,10,26), (0,11,27), (0,12,28), (0,13,29), (0,14,30), (0,15,31), 
          (1,32,48), (1,33,49), (1,34,50), (1,35,51), (1,36,52), (1,37,53), (1,38,54), (1,39,55), 
          (1,40,56), (1,41,57), (1,42,58), (1,43,59), (1,44,60), (1,45,61), (1,46,62), (1,47,63), ),
     (23, (0, 0,23), (0, 1,22), (1, 2,21), (1, 3,20), (0, 4,19), (0, 5,18), (1, 6,17), (1, 7,16), 
          (1, 8,31), (1, 9,30), (0,10,29), (0,11,28), (1,12,27), (1,13,26), (0,14,25), (0,15,24), 
          (0,32,55), (0,33,54), (1,34,53), (1,35,52), (0,36,51), (0,37,50), (1,38,49), (1,39,48), 
          (1,40,63), (1,41,62), (0,42,61), (0,43,60), (1,44,59), (1,45,58), (0,46,57), (0,47,56), ),
     (27, (0, 0,27), (0, 1,26), (1, 2,25), (1, 3,24), (0, 4,31), (0, 5,30), (1, 6,29), (1, 7,28), 
          (0, 8,19), (0, 9,18), (1,10,17), (1,11,16), (0,12,23), (0,13,22), (1,14,21), (1,15,20), 
          (0,32,59), (0,33,58), (1,34,57), (1,35,56), (0,36,63), (0,37,62), (1,38,61), (1,39,60), 
          (0,40,51), (0,41,50), (1,42,49), (1,43,48), (0,44,55), (0,45,54), (1,46,53), (1,47,52), ),
     (29, (0, 0,29), (0, 1,28), (1, 2,31), (1, 3,30), (1, 4,25), (1, 5,24), (0, 6,27), (0, 7,26), 
          (0, 8,21), (0, 9,20), (1,10,23), (1,11,22), (1,12,17), (1,13,16), (0,14,19), (0,15,18), 
          (0,32,61), (0,33,60), (1,34,63), (1,35,62), (1,36,57), (1,37,56), (0,38,59), (0,39,58), 
          (0,40,53), (0,41,52), (1,42,55), (1,43,54), (1,44,49), (1,45,48), (0,46,51), (0,47,50), ),
     (30, (0, 0,30), (0, 1,31), (0, 2,28), (0, 3,29), (1, 4,26), (1, 5,27), (1, 6,24), (1, 7,25), 
          (0, 8,22), (0, 9,23), (0,10,20), (0,11,21), (1,12,18), (1,13,19), (1,14,16), (1,15,17), 
          (0,32,62), (0,33,63), (0,34,60), (0,35,61), (1,36,58), (1,37,59), (1,38,56), (1,39,57), 
          (0,40,54), (0,41,55), (0,42,52), (0,43,53), (1,44,50), (1,45,51), (1,46,48), (1,47,49), ),
     (31, (0, 0,31), (0, 1,30), (1, 2,29), (1, 3,28), (0, 4,27), (0, 5,26), (1, 6,25), (1, 7,24), 
          (1, 8,23), (1, 9,22), (0,10,21), (0,11,20), (1,12,19), (1,13,18), (0,14,17), (0,15,16), 
          (1,32,63), (1,33,62), (0,34,61), (0,35,60), (1,36,59), (1,37,58), (0,38,57), (0,39,56), 
          (0,40,55), (0,41,54), (1,42,53), (1,43,52), (0,44,51), (0,45,50), (1,46,49), (1,47,48), ),
     (32, (0, 0,32), (0, 1,33), (0, 2,34), (0, 3,35), (0, 4,36), (0, 5,37), (0, 6,38), (0, 7,39), 
          (0, 8,40), (0, 9,41), (0,10,42), (0,11,43), (0,12,44), (0,13,45), (0,14,46), (0,15,47), 
          (0,16,48), (0,17,49), (0,18,50), (0,19,51), (0,20,52), (0,21,53), (0,22,54), (0,23,55), 
          (0,24,56), (0,25,57), (0,26,58), (0,27,59), (0,28,60), (0,29,61), (0,30,62), (0,31,63), ),
     (39, (0, 0,39), (0, 1,38), (1, 2,37), (1, 3,36), (0, 4,35), (0, 5,34), (1, 6,33), (1, 7,32), 
          (1, 8,47), (1, 9,46), (0,10,45), (0,11,44), (1,12,43), (1,13,42), (0,14,41), (0,15,40), 
          (1,16,55), (1,17,54), (0,18,53), (0,19,52), (1,20,51), (1,21,50), (0,22,49), (0,23,48), 
          (0,24,63), (0,25,62), (1,26,61), (1,27,60), (0,28,59), (0,29,58), (1,30,57), (1,31,56), ),
     (43, (0, 0,43), (0, 1,42), (1, 2,41), (1, 3,40), (0, 4,47), (0, 5,46), (1, 6,45), (1, 7,44), 
          (0, 8,35), (0, 9,34), (1,10,33), (1,11,32), (0,12,39), (0,13,38), (1,14,37), (1,15,36), 
          (1,16,59), (1,17,58), (0,18,57), (0,19,56), (1,20,63), (1,21,62), (0,22,61), (0,23,60), 
          (1,24,51), (1,25,50), (0,26,49), (0,27,48), (1,28,55), (1,29,54), (0,30,53), (0,31,52), ),
     (45, (0, 0,45), (0, 1,44), (1, 2,47), (1, 3,46), (1, 4,41), (1, 5,40), (0, 6,43), (0, 7,42), 
          (0, 8,37), (0, 9,36), (1,10,39), (1,11,38), (1,12,33), (1,13,32), (0,14,35), (0,15,34), 
          (1,16,61), (1,17,60), (0,18,63), (0,19,62), (0,20,57), (0,21,56), (1,22,59), (1,23,58), 
          (1,24,53), (1,25,52), (0,26,55), (0,27,54), (0,28,49), (0,29,48), (1,30,51), (1,31,50), ),
     (46, (0, 0,46), (0, 1,47), (0, 2,44), (0, 3,45), (1, 4,42), (1, 5,43), (1, 6,40), (1, 7,41), 
          (0, 8,38), (0, 9,39), (0,10,36), (0,11,37), (1,12,34), (1,13,35), (1,14,32), (1,15,33), 
          (1,16,62), (1,17,63), (1,18,60), (1,19,61), (0,20,58), (0,21,59), (0,22,56), (0,23,57), 
          (1,24,54), (1,25,55), (1,26,52), (1,27,53), (0,28,50), (0,29,51), (0,30,48), (0,31,49), ),
     (47, (0, 0,47), (0, 1,46), (1, 2,45), (1, 3,44), (0, 4,43), (0, 5,42), (1, 6,41), (1, 7,40), 
          (1, 8,39), (1, 9,38), (0,10,37), (0,11,36), (1,12,35), (1,13,34), (0,14,33), (0,15,32), 
          (0,16,63), (0,17,62), (1,18,61), (1,19,60), (0,20,59), (0,21,58), (1,22,57), (1,23,56), 
          (1,24,55), (1,25,54), (0,26,53), (0,27,52), (1,28,51), (1,29,50), (0,30,49), (0,31,48), ),
     (51, (0, 0,51), (0, 1,50), (1, 2,49), (1, 3,48), (0, 4,55), (0, 5,54), (1, 6,53), (1, 7,52), 
          (0, 8,59), (0, 9,58), (1,10,57), (1,11,56), (0,12,63), (0,13,62), (1,14,61), (1,15,60), 
          (0,16,35), (0,17,34), (1,18,33), (1,19,32), (0,20,39), (0,21,38), (1,22,37), (1,23,36), 
          (0,24,43), (0,25,42), (1,26,41), (1,27,40), (0,28,47), (0,29,46), (1,30,45), (1,31,44), ),
     (53, (0, 0,53), (0, 1,52), (1, 2,55), (1, 3,54), (1, 4,49), (1, 5,48), (0, 6,51), (0, 7,50), 
          (0, 8,61), (0, 9,60), (1,10,63), (1,11,62), (1,12,57), (1,13,56), (0,14,59), (0,15,58), 
          (0,16,37), (0,17,36), (1,18,39), (1,19,38), (1,20,33), (1,21,32), (0,22,35), (0,23,34), 
          (0,24,45), (0,25,44), (1,26,47), (1,27,46), (1,28,41), (1,29,40), (0,30,43), (0,31,42), ),
     (54, (0, 0,54), (0, 1,55), (0, 2,52), (0, 3,53), (1, 4,50), (1, 5,51), (1, 6,48), (1, 7,49), 
          (0, 8,62), (0, 9,63), (0,10,60), (0,11,61), (1,12,58), (1,13,59), (1,14,56), (1,15,57), 
          (0,16,38), (0,17,39), (0,18,36), (0,19,37), (1,20,34), (1,21,35), (1,22,32), (1,23,33), 
          (0,24,46), (0,25,47), (0,26,44), (0,27,45), (1,28,42), (1,29,43), (1,30,40), (1,31,41), ),
     (55, (0, 0,55), (0, 1,54), (1, 2,53), (1, 3,52), (0, 4,51), (0, 5,50), (1, 6,49), (1, 7,48), 
          (1, 8,63), (1, 9,62), (0,10,61), (0,11,60), (1,12,59), (1,13,58), (0,14,57), (0,15,56), 
          (1,16,39), (1,17,38), (0,18,37), (0,19,36), (1,20,35), (1,21,34), (0,22,33), (0,23,32), 
          (0,24,47), (0,25,46), (1,26,45), (1,27,44), (0,28,43), (0,29,42), (1,30,41), (1,31,40), ),
     (57, (0, 0,57), (0, 1,56), (1, 2,59), (1, 3,58), (1, 4,61), (1, 5,60), (0, 6,63), (0, 7,62), 
          (1, 8,49), (1, 9,48), (0,10,51), (0,11,50), (0,12,53), (0,13,52), (1,14,55), (1,15,54), 
          (0,16,41), (0,17,40), (1,18,43), (1,19,42), (1,20,45), (1,21,44), (0,22,47), (0,23,46), 
          (1,24,33), (1,25,32), (0,26,35), (0,27,34), (0,28,37), (0,29,36), (1,30,39), (1,31,38), ),
     (58, (0, 0,58), (0, 1,59), (0, 2,56), (0, 3,57), (1, 4,62), (1, 5,63), (1, 6,60), (1, 7,61), 
          (1, 8,50), (1, 9,51), (1,10,48), (1,11,49), (0,12,54), (0,13,55), (0,14,52), (0,15,53), 
          (0,16,42), (0,17,43), (0,18,40), (0,19,41), (1,20,46), (1,21,47), (1,22,44), (1,23,45), 
          (1,24,34), (1,25,35), (1,26,32), (1,27,33), (0,28,38), (0,29,39), (0,30,36), (0,31,37), ),
     (59, (0, 0,59), (0, 1,58), (1, 2,57), (1, 3,56), (0, 4,63), (0, 5,62), (1, 6,61), (1, 7,60), 
          (0, 8,51), (0, 9,50), (1,10,49), (1,11,48), (0,12,55), (0,13,54), (1,14,53), (1,15,52), 
          (1,16,43), (1,17,42), (0,18,41), (0,19,40), (1,20,47), (1,21,46), (0,22,45), (0,23,44), 
          (1,24,35), (1,25,34), (0,26,33), (0,27,32), (1,28,39), (1,29,38), (0,30,37), (0,31,36), ),
     (60, (0, 0,60), (0, 1,61), (0, 2,62), (0, 3,63), (0, 4,56), (0, 5,57), (0, 6,58), (0, 7,59), 
          (1, 8,52), (1, 9,53), (1,10,54), (1,11,55), (1,12,48), (1,13,49), (1,14,50), (1,15,51), 
          (0,16,44), (0,17,45), (0,18,46), (0,19,47), (0,20,40), (0,21,41), (0,22,42), (0,23,43), 
          (1,24,36), (1,25,37), (1,26,38), (1,27,39), (1,28,32), (1,29,33), (1,30,34), (1,31,35), ),
     (61, (0, 0,61), (0, 1,60), (1, 2,63), (1, 3,62), (1, 4,57), (1, 5,56), (0, 6,59), (0, 7,58), 
          (0, 8,53), (0, 9,52), (1,10,55), (1,11,54), (1,12,49), (1,13,48), (0,14,51), (0,15,50), 
          (1,16,45), (1,17,44), (0,18,47), (0,19,46), (0,20,41), (0,21,40), (1,22,43), (1,23,42), 
          (1,24,37), (1,25,36), (0,26,39), (0,27,38), (0,28,33), (0,29,32), (1,30,35), (1,31,34), ),
     (62, (0, 0,62), (0, 1,63), (0, 2,60), (0, 3,61), (1, 4,58), (1, 5,59), (1, 6,56), (1, 7,57), 
          (0, 8,54), (0, 9,55), (0,10,52), (0,11,53), (1,12,50), (1,13,51), (1,14,48), (1,15,49), 
          (1,16,46), (1,17,47), (1,18,44), (1,19,45), (0,20,42), (0,21,43), (0,22,40), (0,23,41), 
          (1,24,38), (1,25,39), (1,26,36), (1,27,37), (0,28,34), (0,29,35), (0,30,32), (0,31,33), ),
)

# This data set guides the 6D multivector multiplication R = A*B where sources and result are all self-reversed.
BB = (
    (  1, (0,30,31), (0,46,47), (0,54,55), (0,58,59), (0,60,61) ),
    (  2, (1,29,31), (1,45,47), (1,53,55), (1,57,59), (0,60,62) ),
    (  4, (0,27,31), (0,43,47), (0,51,55), (1,57,61), (1,58,62) ),
    (  8, (1,23,31), (1,39,47), (0,51,59), (0,53,61), (0,54,62) ),
    ( 15, (0,16,31), (0,32,47), (1,51,60), (0,53,58), (1,54,57) ),
    ( 16, (0,15,31), (1,39,55), (1,43,59), (1,45,61), (1,46,62) ),
    ( 23, (1, 8,31), (0,32,55), (0,43,60), (1,45,58), (0,46,57) ),
    ( 27, (0, 4,31), (0,32,59), (1,39,60), (0,45,54), (1,46,53) ),
    ( 29, (1, 2,31), (0,32,61), (0,39,58), (1,43,54), (0,46,51) ),
    ( 30, (0, 1,31), (0,32,62), (1,39,57), (0,43,53), (1,45,51) ),
    ( 31, (0, 1,30), (1, 2,29), (0, 4,27), (1, 8,23), (0,15,16) ),
    ( 32, (0,15,47), (0,23,55), (0,27,59), (0,29,61), (0,30,62) ),
    ( 39, (1, 8,47), (1,16,55), (1,27,60), (0,29,58), (1,30,57) ),
    ( 43, (0, 4,47), (1,16,59), (0,23,60), (1,29,54), (0,30,53) ),
    ( 45, (1, 2,47), (1,16,61), (1,23,58), (0,27,54), (1,30,51) ),
    ( 46, (0, 1,47), (1,16,62), (0,23,57), (1,27,53), (0,29,51) ),
    ( 47, (0, 1,46), (1, 2,45), (0, 4,43), (1, 8,39), (0,15,32) ),
    ( 51, (0, 4,55), (0, 8,59), (1,15,60), (0,29,46), (1,30,45) ),
    ( 53, (1, 2,55), (0, 8,61), (0,15,58), (1,27,46), (0,30,43) ),
    ( 54, (0, 1,55), (0, 8,62), (1,15,57), (0,27,45), (1,29,43) ),
    ( 55, (0, 1,54), (1, 2,53), (0, 4,51), (1,16,39), (0,23,32) ),
    ( 57, (1, 2,59), (1, 4,61), (1,15,54), (0,23,46), (1,30,39) ),
    ( 58, (0, 1,59), (1, 4,62), (0,15,53), (1,23,45), (0,29,39) ),
    ( 59, (0, 1,58), (1, 2,57), (0, 8,51), (1,16,43), (0,27,32) ),
    ( 60, (0, 1,61), (0, 2,62), (1,15,51), (0,23,43), (1,27,39) ),
    ( 61, (0, 1,60), (1, 4,57), (0, 8,53), (1,16,45), (0,29,32) ),
    ( 62, (0, 2,60), (1, 4,58), (0, 8,54), (1,16,46), (0,30,32) ),
)

def FormB( A ): # compute A*~A in an optimized fashion
# The function argument and return are just vectors, not instances of the class Accum
#    assume( 6 == A.dimensions )
#    assume( 0 == A.signature )
    B = [0.0]*64 # util.Clifford.Accum() # new multivector initialized to 0
    # scalar of B is norm of A
    for a in A:
        B[0] += a*a
    for hm in HM:
        n = hm[0]
        for m in hm[1:]:
            x = A[m[1]] * A[m[2]]
            B[n] += [x,-x][m[0]]
        B[n] *= 2
    return B # = A*~A

# working from the table BB[] computed above, 
# construct a multivector product routine where sources and result are all self-reverse.
# The function argument and return are just vectors, not instances of the class Accum
def srmul(A,B):
#    R = util.Clifford.Accum()
    R = [0.0]*64 # util.Clifford.Accum() # new multivector initialized to 0
    R[0] = A[0] * B[0]
    for m in range(len(BB)):
        bb = BB[m]
        n = bb[0]
        R[0] += A[n] * B[n]
        R[n] = A[n] * B[0] + A[0] * B[n]
        for i in range(1,6):
            t = bb[i][0]
            j = bb[i][1]
            k = bb[i][2]
            q = A[j] * B[k] + A[k] * B[j]
            R[n] += [q,-q][t]
    return R  

# Optimization support for a 6D inverse of Euclidean multivector A.
# Input and output are 64 element arrays, leave the decanting of multivectors to externals.
# G is not the inverse of A.  I = ~A * G is the actual inverse of A.
# See util.py for the calling harness
# 
def I6OS(A):
    B = FormB( A )    #    B = A*~A # lacking grades 2,3,6,7, leaving 0,1,4,5
    G = B.copy()      #    G = B.copy()
    G[0] *= -3        #    G.Reg[0] *= -3
    G = srmul( G, B ) #    G *= B
    G[0] *= -1        #    G.Reg[0] *= -1
    G = srmul( G, B ) #    G *= B
    G[0] *= (-1/3)    #    G.Reg[0] *= (-1/3)

    # compute the determinant
    det = G[0] * B[0]
    for i in range(len(BB)):
        n = BB[i][0]
        det += G[n] * B[n]
    scale = 1/det

    # rescale G with the reciprocal of the determinant
    G[0] *= scale
    for i in range(len(BB)):
        n = BB[i][0]
        G[n] *= scale
    
    return G # let the cover function complete the inverse I = ~A * G
